<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet"  href="/login.css">
</head>
<body>
    

<form action="/login" method="post">

<h2>Log In</h2>


<input type="email" name="email" placeholder="xyz@gmail.com">
<input type="password" name="password"  placeholder="Password">

<input type="Submit">

<a href="/signup">Sign Up</a>


</form>


</body>
</html>

<!--const express = require ("express")
const app = express()
const path = require("path")
const hbs = require("hbs")
const collection = require('./mongodbpro')
const bcrypt = require("bcrypt");
const saltRounds = 10;
const crypto = require('crypto');

function generateVerificationToken() {
  const min = 100000; // Minimum 6-digit number
  const max = 999999; // Maximum 6-digit number
  const otp = Math.floor(Math.random() * (max - min + 1)) + min;
  return otp.toString();
}


const templatePath=path.join(__dirname,'../templates')
const static_path=path.join(__dirname,"../publicproject")

app.use(express.static(static_path))
app.use(express.json())
app.set("view engine","hbs")
app.set("views",templatePath)
app.use(express.urlencoded({extended:false}))


app.get("/",(req,resp)=>{
    resp.render("login")
})

app.get("/signup",(req,resp)=>{
    resp.render("signup")
})

app.post("/signup", async (req, resp) => {
  const plaintextPassword = req.body.password;

  try {
    const hashedPassword = await bcrypt.hash(plaintextPassword, saltRounds);
    const otp= generateVerificationToken();

    const data = {
      name: req.body.name,
      email: req.body.email,
      password: hashedPassword,
      Mobile: req.body.Mobile,
      otp: otp, // Store the OTP
      isVerified: false, // Initialize email verification status
    };

    await collection.insertMany([data]);

    // Send the verification email
    sendVerificationEmail(data.email, otp);
     
    resp.render("otp_verification", { email: data.email });
    
  } catch (error) {
    console.error("Error:", error);
    resp.status(500).send("Internal Server Error");
  }
});

     
  const nodemailer = require('nodemailer');

const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'ritesh4843@gmail.com',
    pass: 'zmql nitt afmd lqjm',
  },
});

function sendVerificationEmail(email, otp) {
  const mailOptions = {
    from: 'ritesh4843@gmail.com',
    to: email,
    subject: 'OTP Verification',
    html: `
  <p>Your OTP for email verification is:</p>
  <p><strong>${otp}</strong></p>
`,

  };

  transporter.sendMail(mailOptions, function (error, info) {
    if (error) {
      console.log('Error sending email: ' + error);
    } else {
      console.log('Email sent: ' + info.messageId);
    }
  });
}


app.post("/verify-otp", async (req, resp) => {
  const enteredOTP = req.body.otp;

  console.log('Request body:', req.body);
  const email = req.body.email;
console.log('Searching for user with email:', email);

const user = await collection.findOne({ email: email });

console.log('User found:', user); // Log the user object






    try {
        const user = await collection.findOne({ email: email });

    if (user) {
      if (user.isVerified) {
        resp.send("Email is already verified"); // Email is already verified
      } else {
        // Verify the OTP if needed, e.g., compare with user.otp
        // If OTP is valid, mark the user as verified and clear the OTP
        if (user.otp === req.body.otp) {
          await collection.updateOne(
            { _id: user._id },
            {
              $set: {
                isVerified: true
              },
            }
          );
          resp.send("Email and OTP have been successfully verified."); // Send a success message
        } else {
          resp.send("Invalid OTP");
        }
      }
    } else {
      resp.send("Invalid verification token");
    }
  } catch (error) {
    console.error("Error:", error);
    resp.status(500).send("Internal Server Error");
  }
});

  
  
 
    

  

  app.post("/login", async (req, resp) => {
    try {
      const user = await collection.findOne({ email: req.body.email });
  
      if (user) {
        const isPasswordValid = await bcrypt.compare(
          req.body.password,
          user.password
        );

        const isOtpValid = req.body.otp === user.otp; // Compare the OTP
  
        if (isPasswordValid && isOtpValid) {
          if (user.isVerified) {
            // Password and OTP are valid, and email is verified, allow login
            resp.render("home");
          } else {
            // Password and OTP are valid, but email is not verified, reject login
            resp.send("Email is not verified. Please check your email for a verification link.");
          }
        } else {
          // Password or OTP is invalid, reject login
          resp.send("Wrong password or OTP");
        }
      } else {
        resp.send("User not found");
      }
    } catch (error) {
      console.error("Error:", error);
      resp.status(500).send("Internal Server Error");
    }
});

  

app.listen(3000,()=>{
    console.log("port connected");
})-->